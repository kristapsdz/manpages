<?xml version="1.0" encoding="UTF-8"?>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/xml; charset=utf-8"/>
		<title>Elaborate Function</title>
		<link rel="stylesheet" href="css/book.css" type="text/css"/>
	</head>
	<body>
		<h3 id="elaborate_function">
			Elaborate Function
		</h3>
		<p>
			Let's also study a function form of the elaborate command example.  Again, I'll use C as my example.  Since this is a
			bit more involved, you may feel a little lost if you're not familiar with C programming.  I'll keep the technical jargon
			to a minimum.
		</p>
		<p>
			Let's re-write <span class="func">hi</span> as <span class="func">hello</span>, accepting a Boolean (zero or one)
			integer of whether to capitalise, and an optional character string (a word) prefix.  Let's also stipulate an integer
			return value.
		</p>
		<div class="mdocin">
			.Sh SYNOPSIS
			<br />
			.In hello.h
			<br />
			.Ft int
			<br />
			.Fo hello
			<br />
			.Fa "int C"
			<br />
			.Fa "const char *prefix"
			<br />
			.Fc
		</div>
		<p>
			If you're not familiar with C, the <span class="screen">const char *</span> and <span class="screen">int</span> parts
			are part of the C language.  Note that the <span class="screen">C</span> and <span class="screen">prefix</span> names
			haven't changed.
		</p>
		<p>
			The include file (<a href="macros.xml#macro_in" class="macro">In</a>) and function return type (<a
				href="macros.xml#macro_ft" class="macro">Ft</a>) are unchanged but for the type (<span class="type">int</span>
			instead of <span class="type">void</span>).  I've added an explicit-scope macro pair <a href="macros.xml#macro_fo"
				class="macro">Fo</a> and <a href="macros.xml#macro_fc" class="macro">Fc</a>, syntactically like <a
				href="macros.xml#macro_bl" class="macro">Bl</a> and <a href="macros.xml#macro_el" class="macro">El</a>, that
			encloses the function's arguments.
		</p>
		<p>
			This renders as follows.  Note that the formatter is smart enough to comma-separate the <a href="macros.xml#macro_fa"
				class="macro">Fa</a> macros.
		</p>
		<div class="mdocout">
			<div class="mdoc-section">
				<h1>SYNOPSIS</h1>
				<b class="mdoc-includes">#include &lt;<span class="mdoc-link-includes">hello.h</span>&gt;</b>
				<p></p>
				<i class="mdoc-ftype">int</i>
				<br/>
				<b class="mdoc-fname">hello</b>(<i class="mdoc-farg">int C</i>, <i class="mdoc-farg">const char *prefix</i>);
			</div>
		</div>
		<p>
			It's clear that the <a href="macros.xml#macro_fo" class="macro">Fo</a> macro accepts the function name (as <a
				href="macros.xml#macro_fn" class="macro">Fn</a> did for the simple example), but it also opens a function
			prototype scope.  This scope is closed by <a href="macros.xml#macro_fc" class="macro">Fc</a>.  The contained <a
				href="macros.xml#macro_fa" class="macro">Fa</a> macros are for function arguments.
		</p>
		<p>
			If you're wondering why I didn't use <a href="macros.xml#macro_fn" class="macro">Fn</a> as in the last section, it's a
			matter of readability.  Using <a href="macros.xml#macro_fn" class="macro">Fn</a> puts everything on one long line,
			such as the following.
		</p>
		<div class="mdocin">
			.Sh SYNOPSIS
			<br />
			.In hello.h
			<br />
			.Ft int
			<br />
			.Fn hello "int C" "const char *prefix"
		</div>
		<p>
			This works with two arguments, but can quickly run into long lines.  In general, your <span class="lang">mdoc</span>
			manual shouldn't exceed 78 characters per line.  Shorter lines are useful when managing manuals in <a class="cmd"
				href="commands.xml#cmd_cvs">cvs</a> or other version management systems &mdash; we'll discuss this in later
			sections of this book.
		</p>
		<p>
			The quoted arguments to <a href="macros.xml#macro_fa" class="macro">Fa</a> may seem superfluous, but each argument to the <a href="macros.xml#macro_fa"
				class="macro">Fa</a>, for the C language, refers to a type and variable name.  Since one may specify several
			arguments to a single <a href="macros.xml#macro_fa" class="macro">Fa</a>, the quotes are necessary for signifying a single argument type and
			name.
		</p>
		<div class="mdocin">
			.Sh SYNOPSIS
			<br />
			.In hello.h
			<br />
			.Ft int
			<br />
			.Fo hello
			<br />
			.Fa "<span style="border: thin solid blue;">int C</span>" 
			    "<span style="border: thin solid blue;">const char *prefix</span>"
			<br />
			.Fc
		</div>
		<p>
			This renders as follows, with the <a href="macros.xml#macro_fa" class="macro">Fa</a> scope highlighted.
		</p>
		<div class="mdocout">
			<div class="mdoc-section">
				<h1>SYNOPSIS</h1> 
				<b class="mdoc-includes">#include &lt;<span class="link-includes">hi.h</span>&gt;</b>
				<p></p>
				<i class="mdoc-ftype">void</i>
				<br />
				<b class="mdoc-fname">hello</b>(<i class="mdoc-farg" style="border: thin solid blue;">int C</i>, 
				<i class="mdoc-farg" style="border: thin solid blue;">const char *prefix</i>);
			</div>
		</div>
		<p>
			In the C language, function prototypes don't necessarily need named function arguments.  However, it's good practise to
			name arguments when documenting them in the <span class="sec">SYNOPSIS</span> so that we can consistently refer to them later on in the
			manual.  Let's refer to them now in the <span class="sec">DESCRIPTION</span>, where we document our arguments.
		</p>
		<p>
			Note that there are no set conventions for documenting function arguments in the <span class="sec">DESCRIPTION</span>
			body.  Sometimes this is done within the flow of a regular sentence.  Other times, as below, we'll introduce each
			argument as part of a list.
		</p>
		<div class="mdocin">
			.Sh DESCRIPTION
			<br />
			The
			<br />
			.Fn hello
			<br />
			function prints
			<br />
			.Qq hello, world .
			<br />
			.Pp
			<br />
			It accepts the following arguments:
			<br />
			.Bl -tag -width Ds
			<br />
			.It Fa "int C"
			<br />
			Non-zero if the output should be uppercase.
			<br />
			.It Fa "const char *prefix"
			<br />
			A prefix to precede the output or NULL for no prefix.
			<br />
			.El
		</div>
		<p>
			Here, we see the familiar <a href="macros.xml#macro_bl" class="macro">Bl</a> and <a href="macros.xml#macro_el"
				class="macro">El</a> list enclosure.  Notice how I re-use the <a href="macros.xml#macro_fa"
				class="macro">Fa</a> macro to document individual arguments, just like I re-used <a href="macros.xml#macro_fl"
				class="macro">Fl</a> and <a href="macros.xml#macro_ar" class="macro">Ar</a> when documenting command-line
			flags and arguments.  In the last section, I mentioned why we use <a href="macros.xml#macro_fn" class="macro">Fn</a>
			instead of <a href="macros.xml#macro_nm" class="macro">Nm</a> for re-stating the name.
		</p>
		<p>
			This renders as follows.
		</p>
		<div class="mdocout">
			<div class="mdoc-section">
				<h1>DESCRIPTION</h1>
				The <b class="mdoc-name">hello</b>() function prints &#8220;hello, world&#8221;.<p></p>
				It accepts the following arguments:
				<dl style="margin-top: 0.00em;margin-bottom: 0.00em;" class="mdoc-list mdoc-list-tag">
					<dt class="mdoc-list-tag" style="margin-top: 1.00em;">
						<i class="mdoc-farg">int C</i></dt>
					<dd class="mdoc-list-tag" style="margin-left: 6.00ex;">
						Non-zero if the output should be uppercase.</dd>
					<dt class="mdoc-list-tag" style="margin-top: 1.00em;">
						<i class="mdoc-farg">const char *prefix</i></dt>
					<dd class="mdoc-list-tag" style="margin-left: 6.00ex;">
						A prefix to precede the output or NULL for no prefix.</dd>
				</dl>
			</div>
		</div>
		<p>
			Finally, let's add a section documenting the return value of this function.  This will differ from the simple example in
			that we actually return a value.  
		</p>
		<div class="mdocin">
			.Sh RETURN VALUES
			<br />
			The
			<br />
			.Fn hello
			<br />
			function returns 1 on success, 0 on failure.
		</div>
		<p>
			Piecing this example together, we have the following the following respectable C function manual.
		</p>
		<div class="mdocin">
			.Dd May 30, 2011
			<br />
			.Dt HELLO 3
			<br />
			.Os
			<br />
			.Sh NAME
			<br />
			.Nm hello
			<br />
			.Nd print \(dqhello, world\(dq
			<br />
			.Sh SYNOPSIS
			<br />
			.In hello.h
			<br />
			.Ft int
			<br />
			.Fo hello
			<br />
			.Fa "int C" "const char *prefix"
			<br />
			.Fc
			<br />
			.Sh DESCRIPTION
			<br />
			The
			<br />
			.Fn hello
			<br />
			function prints
			<br />
			.Qq hello, world .
			<br />
			.Pp
			<br />
			It accepts the following arguments:
			<br />
			.Bl -tag -width Ds
			<br />
			.It Fa "int C"
			<br />
			Non-zero if the output should be uppercase.
			<br />
			.It Fa "const char *prefix"
			<br />
			A prefix to precede the output or NULL for no prefix.
			<br />
			.El
			<br />
			.Sh RETURN VALUES
			<br />
			The
			<br />
			.Fn hello
			<br />
			function returns 1 on success, 0 on failure.
		</div>
		<p>
			Running through our checklist, we see that we've described preprocessor information with the header file macro <a
				href="macros.xml#macro_in" class="macro">In</a>; function calling syntax and types in the <span
				class="sec">SYNOPSIS</span>; and arguments in the <span class="sec">DESCRIPTION</span> along with function
			operation.  This contains all we need to know about the function.
		</p>
		<table class="nav">
			<tbody>
				<tr>
					<td class="nav-contents"><a href="toc.xml">Contents</a></td>
					<td class="nav-next"><a href="part1-2-3.xml">Next</a></td>
					<td class="nav-home"><a href="http://manpages.bsd.lv/index.html">Home</a></td>
					<td class="nav-history"><a href="http://manpages.bsd.lv/cgi-bin/cvsweb/part1-2-2.xml?cvsroot=manpages">History</a></td>
				</tr>
			</tbody>
		</table>
		<p class="edits">
			Last edited by $Author$ on $Date$.  Copyright &copy; 2011, Kristaps Dzonsons.  CC BY-SA.
		</p>
	</body>
</html>
